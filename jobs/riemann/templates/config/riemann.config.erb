; -*- mode: clojure; -*-
; vim: filetype=clojure

(include "mailer.clj")
(include "alert.clj")
(include "graphite.clj")
(include "cf.clj")

; ########### Configurations #############
(logging/init {:console true :file "/var/vcap/sys/log/riemann/riemann.log"})

(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host})
  (graphite-server {:host host}))


; Expire old events from the index every 10 seconds.
(periodically-expire 10)


(let [index (default :ttl 60 (index))
      graph (async-queue! :graphite {:max-pool-size <%= p("riemann.graphite.threadpool.maxsize") %>, :queue-size <%= p("riemann.graphite.threadpool.queue") %>} graph)]

  (streams index)

  (streams
    ; Check CF events
    (where (service #"<%= p('riemann.cf.name') %>.*")
      cf-data
      cf-measure
      cf-health))

  (streams
    ; Calculate an overall rate of events.
    (with {:metric 1 :host "riemann" :state "normal" :service "riemann events_sec"}
      (rate 5 index graph)))

  (streams
    ; Send to graphite
    graph)

  (streams alert)

  (include "mongodb.clj")
  (include "framefrog.clj")
)
