; -*- mode: clojure; -*-
; vim: filetype=clojure

; plugins includes
(include "alert.clj")
<% if_p("riemann.victorops.apikey") do %>(include "victorops.clj")<% end %>
<% if_p("riemann.graphite.host") do %>(include "graphite.clj")<% end %>
<% if_p("riemann.influxdb.host") do %>(include "influxdb.clj")<% end %>

(def hostname (.getHostName (java.net.InetAddress/getLocalHost)))

; ########### Configurations #############
(logging/init {:console true})

(let [host "<%= p('riemann.listen_addr') %>"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host})
  (graphite-server
    :host host
    :parser-fn
      (fn [{:keys [service] :as event}]
        (if-let [[host metricname] (clojure.string/split service #"\." 2)]
          {:host host :service metricname :metric (:metric event) :time (:time event) :ttl <%= p("riemann.graphite_server_index_ttl") %>}))))

; Expire old events from the index
(periodically-expire <%= p("riemann.periodically_expire") %>)

(let [
    index (default :ttl <%= p("riemann.index_ttl") %> (index))
    <% if_p("riemann.graphite.host") do %>graph (async-queue! :graphite {:max-pool-size <%= p("riemann.graphite.threadpool.maxsize") %>, :queue-size <%= p("riemann.graphite.threadpool.queue") %>} graph)<% end %>
    <% if_p("riemann.influxdb.host") do %>influx (async-queue! :influxdb {:max-pool-size <%= p("riemann.influxdb.threadpool.maxsize") %>, :queue-size <%= p("riemann.influxdb.threadpool.queue") %>} influx)<% end %>
  ]

  (streams index)
  
  <% if_p("riemann.graphite.host") do %>
  (streams
    (with {:metric 1 :host hostname :state "normal" :service "riemann events_sec"} (rate 10 index graph))
    (where (number? metric)
      graph
    )
  )
  <% end %>

  <% if_p("riemann.influxdb.host") do %>
  (streams
    (with {:metric 1 :host hostname :state "normal" :service "riemann events_sec"} (rate 10 index influx))
    (where (number? metric)
      influx
    )
  )
  <% end %>

  <%= p("riemann.custom_rules") %>
)
