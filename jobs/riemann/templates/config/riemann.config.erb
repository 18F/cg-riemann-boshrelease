; -*- mode: clojure; -*-
; vim: filetype=clojure

(include "mailer.clj")
<% if_p("riemann.victorops.apikey") do %>(include "victorops.clj")<% end %>
(include "alert.clj")
(include "graphite.clj")
<% if_p("riemann.influxdb.host") do %>(include "influxdb.clj")<% end %>
(include "cf.clj")
(include "bosh.clj")
(include "log-dispatcher.clj")

; ########### Configurations #############
(logging/init {:console true :file "/var/vcap/sys/log/riemann/riemann.log"})

(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host})
  (graphite-server {:host host})
)


; Expire old events from the index every 30 seconds.
(periodically-expire 30)

(let [index (default :ttl 60 (index))
      graph (async-queue! :graphite {:max-pool-size <%= p("riemann.graphite.threadpool.maxsize") %>, :queue-size <%= p("riemann.graphite.threadpool.queue") %>} graph)]

  (streams index)

  (streams
    ; Check CF events
    (where (service #"<%= p('riemann.cf.name') %>.*")
      cf-data
      cf-measure
      ; cf-health
      cf-router
    )
  )

  (streams
    ; Calculate an overall rate of events.
    (with {:metric 1 :host "riemann" :state "normal" :service "riemann events_sec"}
      (rate 5 index graph)
    )
  )

  (include "mongodb.clj")
  (include "framefrog.clj")
  (include "predictor.clj")

  (streams bosh-hm)
  (streams graph)

  <% if_p("riemann.influxdb.host") do %>
  (streams
    (fn [event]
      (let [service (clojure.string/replace (:service event) " " ".")
            series (if (:host event) (format "%s.%s" (:host event) service) (format "%s" service))]
        (influx series {:time  (:time event) :value (:metric event)})
      )
    )
  )
  <% end %>
  
    (streams log-dispatcher)
  (streams graph)

  <% if_p("riemann.influxdb.host") do %>
  (streams
    (fn [event]
      (let [service (clojure.string/replace (:service event) " " ".")
            series (if (:host event) (format "%s.%s" (:host event) service) (format "%s" service))]
        (influx series {:time  (:time event) :value (:metric event)})
      )
    )
  )
  <% end %>

  ;some alerts are managed elsewhere
  (streams
    (where
      (and
        (not (service #"mongodb.*"))
        (not (service #".*ReplicaSet.TenantCountCapacityReached.*"))
        (not (service #"<%= p('riemann.cf.name') %>.*"))
        (not (and (service #".*elasticsearch health.*") (state "warning")))
      )
      alert
    )
  )
)
