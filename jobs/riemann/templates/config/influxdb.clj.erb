(require 'capacitor.core)
(require 'capacitor.async)
(require 'clojure.core.async)

(defn make-async-influxdb-client [opts]
  (let [client (capacitor.core/make-client opts) events-in (capacitor.async/make-chan) resp-out (capacitor.async/make-chan)]
    (capacitor.async/run! events-in resp-out client 100 10000)
    (fn [series payload]
      (let [p (merge payload { :series series :time (* 1000 (:time payload)) ;; s â†’ ms
        })]
        (clojure.core.async/put! events-in p)
      )
    )
  )
)

<% if_p("riemann.influxdb.host") do %>
(def influx (make-async-influxdb-client {
    :host     "<%= p('riemann.influxdb.host') %>"
    :port     <%= p('riemann.influxdb.port') %>
    :username "<%= p('riemann.influxdb.username') %>"
    :password "<%= p('riemann.influxdb.password') %>"
    :db       "<%= p('riemann.influxdb.db') %>"
  })
)
<% end %>
