(def cf-data
  "Calculate total available memory"
  (where (service #"<%= p('riemann.cf.name') %>.DEA.*available_memory_ratio")
    (with :host "DEA"
      (coalesce 30
        (smap folds/mean
          (with {:host nil :service "<%= p('riemann.cf.name') %>.hybris.available_memory_ratio"} reinject)
        )
      )
    )
  )
)

(def cf-measure
  "Check available memory ratio"
  (where (and (service "<%= p('riemann.cf.name') %>.hybris.available_memory_ratio") (not (nil? metric)))
    (split
      (< metric <%= p('riemann.cf.memory_ratio_alert') %>)  (with :state "critical" alert)
                      (with :state "ok" alert)
    )
  )
)

(def cf-health
  "Check health"
  (where (service #"<%= p('riemann.cf.name') %>.*healthy")
    (where (state "ok") alert)
    (where (state "expired") (with :state "critical" alert))
  )
)

(def cf-router
  "Router Health Check"

  (where (and (not (state "expired")) (not (nil? metric)))

    ; Make sure port 80 is available
    (where (service #".*Router.*heartbeat")
      (split
        (= metric 1) (with :state "ok"       alert)
                     (with :state "critical" alert)
    )

    ; ########### Check last updated time ###########
    (where (service #".*Router.*ms_since_last_registry_update")
      (split
        (> metric 5000.0) (with :state "critical" alert)
        (> metric 2000.0) (with :state "warning"  alert)
                          (with :state "ok"       alert)
      )
    )

    ; ########### Check routers' total routes to make sure they match between the group ###########
    (where (service #".*Router.*total_routes")
      ; Find the mode (most frequent value in the pool) and alert all routers that are not following it
      (coalesce
        (smapcat (fn [events]
                   (let [freq (frequencies (map :metric events))
                         mode (apply max-key freq (keys freq))]
                     (map
                       (split
                         (= metric mode) (with :state "ok"       alert)
                                         (with :state "critical" alert)
                       )
                      events)
                    )
                  )
        )
      )
    )
  ) ; where
) ;def
